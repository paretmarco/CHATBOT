import json
import os
import requests
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def send_query_to_chatbot(question, title, additional_context):
    chatbot_url = "http://127.0.0.1:5001/api/chatbot"
    prompt = f"queste domande spiegale meglio con un paragrafo di integrazione indipendednte aggiuntivo e col suo titoletto del capitolo### {title} ###, esse sono ### {question} ###\nRispondi nella stessa lingua delle domande e sii molto pregnante e chiaro nella prima riga per dare il senso del paragrafo. Personalizza parlando in prima persona opure utilizza il voi oppure il tu. Puoi utilizzare vari formati. Storia (vi racconto ora una storia per capire come), domande dei clienti (alcuni clienti domandano) a seconda di quello che è più appropriato."
    data = {
        "user_input": prompt,
        "max_tokens": 400,
        "additional_context": additional_context
    }
    response = requests.post(chatbot_url, json=data)
    
    logging.info(f"Prompt sent: {prompt}")
    
    if response.status_code == 200:
        json_data = response.json()
        if 'response' in json_data:
            logging.info(f"Answer received: {json_data['response']}")
            return json_data["response"]
        else:
            logging.error("'response' key is missing in the chatbot JSON data.")
            return None
    else:
        logging.error(f"Error in chatbot response: {response.status_code}")
        return None

def process_questions():
    input_file = os.path.join("book_created", "book_data_with_questions.json")  # Input file path
    output_file = os.path.join("book_created", "book_with_faq.json")  # Output file path
    logging.info(f"Input file: {input_file}")

    if not os.path.exists(input_file):
        logging.error("Input file not found.")
        return

    with open(input_file, "r") as infile:
        book_data = json.load(infile)  # Load book data

        for index, record in enumerate(book_data):
            title = record.get("title", "")
            relevant_questions = record.get("relevant_questions", "").strip().split('\n')
            logging.info(f"Extracted questions: {relevant_questions}")
            faqs = []

            for question in relevant_questions:
                logging.info(f"Processing question: {question}")

                # Send the question to the chatbot and get the response
                chatbot_response = send_query_to_chatbot(question, title, additional_context)

                if chatbot_response:
                    faqs.append({"question": question, "answer": chatbot_response})
                    logging.info(f"Chatbot response for question: '{question}' is '{chatbot_response}'")

            # Save the FAQ section in the record
            record["FAQ"] = faqs

            logging.info(f"JSON file updated with results for questions in chapter {index + 1}.")

    # Save the updated book data with FAQ section
    with open(output_file, "w") as jsonfile:
        json.dump(book_data, jsonfile, ensure_ascii=False, indent=2)

    logging.info(f"Finished processing questions.")

if __name__ == "__main__":
    with open('config.json') as config_file:
        config = json.load(config_file)
        additional_context = config['additional_context']

    process_questions()
