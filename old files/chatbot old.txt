import os
import openai
import requests
import json
from flask import Flask, request, jsonify
import logging
from flask_cors import CORS

logging.basicConfig(level=logging.INFO)

app = Flask(__name__)
CORS(app)

# Set up OpenAI API
openai.api_key = os.environ["OPENAI_API_KEY"]

# Define the search_snippets function
def search_snippets(query):
    # Log the query
    logging.info(f"Searching snippets for query: {query}")
    
    # Define the URL for the search_snippets API
    search_url = "http://127.0.0.1:5000/api/search"
    
    # Make a POST request to the search_snippets API
    response = requests.post(search_url, json={"query": query})

    # Log the status code of the response
    logging.info(f"Search response status code: {response.status_code}")

    # If the status code is 200, return the JSON response, otherwise return None
    if response.status_code == 200:
        return json.loads(response.text)
    else:
        return None

def process_chatbot_request(user_input, max_tokens, user_personality, additional_context):
    # Log the user input
    logging.info(f"Processing chatbot request with user_input: {user_input}")
    
    # Get the search results from the search_snippets function
    search_results = search_snippets(user_input)
    
    logging.info(f"Search results received: {search_results}")
    
    # Set the context based on the search results
    if search_results and search_results["response"]:
        context = search_results["response"][0]["response"]
    else:
        context = "I couldn't find any relevant information."

    # Create messages array for the chat request
    messages = [
        {"role": "system", "content": user_personality},
        {"role": "assistant", "content": additional_context + " " + context},
        {"role": "user", "content": user_input}
    ]

    # Make a chat request to the OpenAI API
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        max_tokens=int(max_tokens),  # Convert max_tokens to an integer here
        n=1,
        stop=None,
        temperature=0.8,
    )

    # Get the assistant's reply from the response
    assistant_reply = response.choices[0].message['content']
    
    return assistant_reply

@app.route("/api/chatbot", methods=["POST"])
def chatbot():
    try:
        # Get the user input and other parameters from the request JSON data
        data = request.json
        user_input = data["user_input"]
        max_tokens = data["max_tokens"]
        user_personality = data["user_personality"]
        additional_context = data["additional_context"]

        # Log the received user input
        logging.info(f"Received chatbot API request with user_input: {user_input}")
        
        # Process the chatbot request and get the response
        response_text = process_chatbot_request(user_input, max_tokens, user_personality, additional_context)
        
        # Log the generated chatbot response
        logging.info(f"Generated chatbot response: {response_text}")
        
        # Return the response as JSON
        return jsonify({"response": response_text})
    except Exception as e:
        # Log any errors that occur
        logging.error(f"Error in chatbot API: {str(e)}")
        
        # Return the error as JSON
        return jsonify({"error": str(e)})

if __name__ == "__main__":
    app.run(host="127.0.0.1", port=5001)
