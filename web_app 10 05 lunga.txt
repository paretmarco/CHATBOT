from flask import Flask, render_template, request, jsonify
import requests
import time
import uuid
from flask_caching import Cache
import redis
import logging
import json

app = Flask(__name__)
cache = Cache(app, config={'CACHE_TYPE': 'RedisCache', 'CACHE_REDIS_URL': 'redis://redis:6379/0'})

logging.basicConfig(level=logging.INFO, filename='/logs/web_app.log', filemode='a', format='%(asctime)s - %(levelname)s - %(message)s')

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/submit', methods=['POST'])
def submit():
    data = request.get_json()
    user_input = data['user_input']
    user_uuid = str(uuid.uuid4())

    logging.info(f"Submit request received: {user_input}")

    cache_key = f"{user_input}"
    cached_response = cache.get(cache_key)

    if cached_response is not None:
        logging.info(f"Cache hit for: {cache_key}")
        return jsonify({"status": "completed", "response": cached_response})

    def process_request(user_input):
        app_script_url = "https://script.google.com/macros/s/AKfycbxETV2aXWIU3CEAruMwRfE3ijRLMYOunBpBaRGiFpISmjR0BtNvW7Bwph4cegyFmcCDlQ/exec"
        try:
            logging.info(f"Submitting request to Google Script")
            response = requests.post(app_script_url, json={"user_input": user_input})
            logging.info(f"Response from Google Script: {response.text}")
            if response.text.startswith('<!doctype'):
                raise ValueError(f"Invalid JSON response received: {response.text}")
            json_response = json.loads(response.text)  # Parse the JSON response
            logging.info(f"Parsed request JSON: {data}")
            return json_response  # Return the parsed JSON object
        except Exception as e:
            logging.error(f"Error during external script request: {e}")
            raise

    # Delayed processing (use threads, celery or another background task library to improve this)
    time.sleep(10)
    response_text = process_request(user_input)
    logging.info(f"Received response from process_request: {response_text}")
    cache.set(cache_key, response_text, timeout=None)
    cache.set(user_uuid, response_text, timeout=None)
    logging.info(f"Cache miss, storing result for: {cache_key}")
    return jsonify({"status": "submitted", "uuid": user_uuid})

@app.route('/api/check_status', methods=['POST'])
def check_status():
    data = request.get_json()
    user_uuid = data["uuid"]

    logging.info(f"Check status request received: {user_uuid}")

    cached_response = cache.get(user_uuid)
    if cached_response is not None:
        logging.info(f"Found completed request for UUID: {user_uuid}")
        logging.info(f"Sending response: {cached_response}")
        return jsonify({"status": "completed", "response": cached_response})
    else:
        logging.info(f"In progress request for UUID: {user_uuid}")
        return jsonify({"status": "in_progress"})

@app.route('/test')
def test():
    return "Test route is working!"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8001)
