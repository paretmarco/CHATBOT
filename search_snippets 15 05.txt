import json
import logging
import os
import pinecone
from llama_index import GPTPineconeIndex
from flask import Flask, render_template, request, jsonify
from flask_cors import CORS

# Load default values from config.json
with open("config.json") as config_file:
    config = json.load(config_file)

verbose = config["verbose"]
default_max_tokens = config["max_tokens"]

# Configure logging
logging.basicConfig(filename='search_snippets.log', level=logging.INFO, format='%(asctime)s:%(levelname)s:%(message)s')

# Set Pinecone API key and environment
pinecone_api_key = "93fa5151-3b05-430b-a7a1-78dcf32c7ed3"
pinecone_environment = "northamerica-northeast1-gcp"
pinecone.init(api_key=pinecone_api_key, environment=pinecone_environment)

# Load Pinecone index
index_name = "project24"
pinecone_index = pinecone.Index(index_name)

index = GPTPineconeIndex([], pinecone_index=pinecone_index)

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})

@app.route('/api/search', methods=['POST'])
def search_api():
    try:
        if verbose:
            logging.info("Received search API request")
        query = request.json['query']
        num_results = int(request.json.get('num_results', default_num_results))
        if verbose:
            logging.info(f'Querying index with "{query}"...')
        response = index.query(query, similarity_top_k=num_results, response_mode="default")
        logging.info(f"Raw response: {response}")
        if verbose:
            logging.info(f"Response: {response.response}")
        if response:
            logging.info(f"Response type: {type(response)}")
            logging.info(f"Source nodes: {response.source_nodes}")
            snippets = [{"response": r.node.text} for r in response.source_nodes]
            if verbose:
                logging.info(f'Snippets are "{snippets}"')
        else:
            snippets = []
        return jsonify({'query': query, 'response': snippets})
    except Exception as e:
        logging.error(f"Error searching for '{query}': {str(e)}")
        return jsonify({'error': str(e), 'error_message': f"Error searching for '{query}': {str(e)}"}), 500

@app.route('/search', methods=['POST'])
def search_snippets(search_term, num_results=None):
    # Retrieve the default number of results from config.json if num_results is None
    if num_results is None:
        with open('config.json') as f:
            data = json.load(f)
            num_results = data['default_num_results']
    try:
        query = request.form['query']
        num_results = int(request.form.get('num_results', default_num_results))
        if verbose:
            logging.info(f'Querying index with "{query}"...')
        response = index.query(query, similarity_top_k=num_results, response_mode="default")
        logging.info(f"Raw response: {response}")
        if verbose:
            logging.info(f"Response: {response.response}")
        if response:
            logging.info(f"Response type: {type(response)}")
            logging.info(f"Source nodes: {response.source_nodes}")
            snippets = [{"response": r.text} for r in response.source_nodes]
            if verbose:
                logging.info(f'Snippets are "{snippets}"')
        else:
            snippets = []
        return render_template('search_page.html', query=query, snippets=snippets)
    except Exception as e:
        logging.error(f"Error searching for '{query}': {str(e)}")
        return render_template('search_page.html', query=query, snippet='')

@app.route('/')
def search_page():
    return render_template('search_page.html')

if __name__ == '__main__':
    logging.info('Starting server...')
    host = os.environ.get("FLASK_HOST", "127.0.0.1")
    app.run(host=host)


